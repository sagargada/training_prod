<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:int="http://www.springframework.org/schema/integration"
	xmlns:amqp="http://www.springframework.org/schema/integration/amqp"
	xmlns:http="http://www.springframework.org/schema/integration/http"
	xmlns:mail="http://www.springframework.org/schema/integration/mail"
	xmlns:mongo="http://www.springframework.org/schema/data/mongo"
	xmlns:rabbit="http://www.springframework.org/schema/rabbit"
	xmlns:util="http://www.springframework.org/schema/util"
	xmlns:jdbc="http://www.springframework.org/schema/jdbc"
	xmlns:cloud="http://schema.cloudfoundry.org/spring"
	xsi:schemaLocation="http://www.springframework.org/schema/integration/http http://www.springframework.org/schema/integration/http/spring-integration-http-2.1.xsd
		http://www.springframework.org/schema/integration/amqp http://www.springframework.org/schema/integration/amqp/spring-integration-amqp-2.1.xsd
		http://www.springframework.org/schema/integration/mail http://www.springframework.org/schema/integration/mail/spring-integration-mail-2.1.xsd
		http://www.springframework.org/schema/integration http://www.springframework.org/schema/integration/spring-integration-2.1.xsd
		http://www.springframework.org/schema/rabbit http://www.springframework.org/schema/rabbit/spring-rabbit-1.0.xsd
		http://www.springframework.org/schema/data/mongo http://www.springframework.org/schema/data/mongo/spring-mongo-1.0.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.1.xsd
		http://www.springframework.org/schema/jdbc http://www.springframework.org/schema/jdbc/spring-jdbc-3.1.xsd
		http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util-3.1.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.1.xsd
		http://schema.cloudfoundry.org/spring http://schema.cloudfoundry.org/spring/cloudfoundry-spring-0.8.xsd">

	<context:property-placeholder location="classpath:/mail.properties" />

	<amqp:inbound-channel-adapter channel="orderChannel"
		connection-factory="rabbitConnectionFactory"
		queue-names="orders"
		advice-chain="retryInterceptor" />

	<bean id="retryInterceptor" class="org.springframework.amqp.rabbit.config.StatelessRetryOperationsInterceptorFactoryBean" />

	<int:chain input-channel="orderChannel" output-channel="warehouseChannel">
		<int:claim-check-out/>
		<int:json-to-object-transformer type="org.wgrus.Order"/>
		<!--
		<mail:header-enricher>
			<mail:to expression="payload.email"/>
		</mail:header-enricher>
		-->
	</int:chain>

	<int:publish-subscribe-channel id="warehouseChannel"/>

	<int:chain input-channel="warehouseChannel">
		<int:object-to-string-transformer/>
		<int:service-activator ref="orderQueue" method="add"/>
	</int:chain>

	<int:logging-channel-adapter id="logger" channel="warehouseChannel" level="WARN"/>

	<bean id="orderQueue" class="org.wgrus.OrderQueue"/>

	<bean id="messageStore" class="org.springframework.integration.mongodb.store.MongoDbMessageStore">
		<constructor-arg ref="mongoDbFactory"/>
	</bean>

	<rabbit:queue name="orders"/>

	<rabbit:admin connection-factory="rabbitConnectionFactory"/>

	<beans profile="default">
		<mongo:db-factory/>
		<rabbit:connection-factory id="rabbitConnectionFactory"/>
	</beans>

	<beans profile="cloud">
		<cloud:mongo-db-factory id="mongoDbFactory"/>
		<cloud:rabbit-connection-factory id="rabbitConnectionFactory"/>
	</beans>
	



	<!--
	<bean id="messageStore" class="org.springframework.integration.jdbc.JdbcMessageStore">
		<constructor-arg ref="dataSource" />
	</bean>

	<jdbc:initialize-database enabled="false">
		<jdbc:script location="classpath:/org/springframework/integration/jdbc/schema-mysql.sql"/>
	</jdbc:initialize-database>
	-->
	
	<!-- 
	<http:outbound-gateway request-channel="warehouseChannel"
		url="#{environmentProperties['warehouse.url']?:'http://127.0.0.1:8124'}/{productId}"
		http-method="GET" reply-channel="filterChannel"
		expected-response-type="java.lang.String">
		<http:uri-variable name="productId" expression="payload.productId" />
	</http:outbound-gateway>

	<int:publish-subscribe-channel id="filterChannel" />

	<int:logging-channel-adapter channel="filterChannel"
		log-full-message="true" level="WARN" />

	<int:filter input-channel="filterChannel" expression="!payload.equals('0')"
		output-channel="inStock" discard-channel="outOfStock" />

	<int:transformer input-channel="inStock"
		expression="'Thanks for your order. The items are in stock!'"
		output-channel="mailChannel" />

	<int:transformer input-channel="outOfStock"
		expression="'Unfortunately, we are out of stock at the moment.'"
		output-channel="mailChannel" />

	<int:publish-subscribe-channel id="mailChannel" />
-->

	<!-- mail:outbound-channel-adapter channel="mailChannel" username="${mail.username}" 
		password="${mail.password}" host="${mail.host}"/ -->

<!-- 
	<int:logging-channel-adapter channel="mailChannel"
		log-full-message="true" level="WARN" />
-->

</beans>
