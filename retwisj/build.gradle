// used for artifact names, building doc upload urls, etc.
description = 'Spring Data Key Value Examples - RetwisJ'
abbreviation = 'DATAKV'

apply plugin: 'base'
apply plugin: "java"
apply plugin: 'eclipse'
apply plugin: 'idea'
apply plugin: "maven"
apply plugin: 'war'	

group = 'org.springframework.data'
version = "$springDataRedisTwitterVersion"
archivesBaseName = "retwisj"

sourceCompatibility = 1.6

buildscript {
    repositories {
        add(new org.apache.ivy.plugins.resolver.URLResolver()) {
            name = "GitHub"
            addIvyPattern 'http://cloud.github.com/downloads/costin/gradle-stuff/[organization].[module]-[artifact]-[revision].[ext]'
            addArtifactPattern 'http://cloud.github.com/downloads/costin/gradle-stuff/[organization].[module]-[revision].[ext]'
        }
        mavenCentral()
        mavenRepo name: "springsource-org-release", urls: "http://repository.springsource.com/maven/bundles/release"
        mavenRepo name: "springsource-org-external", urls: "http://repository.springsource.com/maven/bundles/external"
    }

    dependencies {
        classpath 'org.springframework:gradle-stuff:0.1-20110404'
        classpath 'net.sf.docbook:docbook-xsl:1.75.2:ns-resources@zip'
    }
}

repositories {
  mavenLocal()
  mavenCentral()
	mavenRepo name: "ext-snapshots", urls: "http://springframework.svn.sourceforge.net/svnroot/springframework/repos/repo-ext/"
  // Public Spring artefacts
  mavenRepo name: "springsource-org-release", urls: "http://repository.springsource.com/maven/bundles/release"
  mavenRepo name: "springsource-org-external", urls: "http://repository.springsource.com/maven/bundles/external"
  mavenRepo name: "spring-release", urls: "http://maven.springframework.org/release"
  mavenRepo name: "spring-milestone", urls: "http://maven.springframework.org/milestone"
  mavenRepo name: "spring-snapshot", urls: "http://maven.springframework.org/snapshot"
  
}

dependencies {
	compile "org.slf4j:slf4j-api:$slf4jVersion"
	compile "org.slf4j:jcl-over-slf4j:$slf4jVersion"
	runtime "org.slf4j:slf4j-log4j12:$slf4jVersion"
    runtime "log4j:log4j:$log4jVersion"
	compile "org.codehaus.jackson:jackson-core-asl:$jacksonVersion"
	compile "org.codehaus.jackson:jackson-mapper-asl:$jacksonVersion"
	compile "javax.servlet:com.springsource.javax.servlet.jsp.jstl:1.2.0"
	compile ("org.springframework.data:spring-data-redis:$springRedisVersion") {
        exclude group: 'commons-logging'
    }
	compile "org.springframework:spring-webmvc:$springVersion"
	compile "javax.inject:com.springsource.javax.inject:1.0.0"
	providedCompile "javax.servlet:com.springsource.javax.servlet:2.4.0"
	providedCompile "javax.servlet:com.springsource.javax.servlet.jsp:2.1.0"
	compile "javax.servlet:com.springsource.javax.servlet.jsp.jstl:1.2.0"
	compile "org.apache.taglibs:com.springsource.org.apache.taglibs.standard:1.1.2"
	
    // CloudFoundry artifact
	runtime "org.cloudfoundry:cloudfoundry-runtime:0.6.1"
	
	// Testing
	testCompile "junit:junit:$junitVersion"
	testCompile "org.springframework:spring-test:$springVersion"
	testCompile "org.mockito:mockito-all:$mockitoVersion"
}

ideaProject {
	withXml { provider ->
		provider.node.component.find { it.@name == 'VcsDirectoryMappings' }.mapping.@vcs = 'Git'
	}
}

task wrapper(type: Wrapper) {
    gradleVersion = '1.0-milestone-3'
}

war {
  archiveName = baseName + "." + extension
}

    apply plugin: 'docbook'

    docbookHtmlSingle.stylesheet = new File(projectDir, 'docs/src/reference/resources/xsl/html-single-custom.xsl')
    [docbookHtml, docbookFoPdf, docbookHtmlSingle]*.sourceFileName = 'index.xml'
    [docbookHtml, docbookFoPdf, docbookHtmlSingle]*.sourceDirectory = new File(projectDir, 'docs/src/reference/docbook')

    docbookHtml.stylesheet = new File(projectDir, 'docs/src/reference/resources/xsl/html-custom.xsl')
    docbookHtmlSingle.stylesheet = new File(projectDir, 'docs/src/reference/resources/xsl/html-single-custom.xsl')
    docbookFoPdf.stylesheet = new File(projectDir, 'docs/src/reference/resources/xsl/pdf-custom.xsl')
    def imagesDir = new File(projectDir, 'docs/src/reference/resources/images');
//    docbookFoPdf.admonGraphicsPath = "${imagesDir}/"
    docbookFoPdf.imgSrcPath = "${projectDir}/docs/reference/resources/"

    spec = copySpec {
        into ('reference') {
            from("$buildDir/docs")
            from("$projectDir/src/reference/resources")
        }
        into ('reference/images') {
            from (imagesDir)
        }
    }
    
defaultTasks 'build'